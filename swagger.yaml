openapi: 3.0.0
info:
  title: Brok API
  description: |
    A financial tracking API for brok.
    
    ## Key Features:
    - **Automatic Balance Updates**: Asset balances are automatically updated when transactions are created or deleted
    - **Transaction Types**: Support for 'income' (positive balance change) and 'expense' (negative balance change)
    - **Real-time Balance Calculation**: Asset balance reflects the sum of all associated transactions
    
    ## Transaction Behavior:
    - **Creating a transaction**: Automatically updates the asset's balance
    - **Deleting a transaction**: Automatically reverses the balance change
    - **Balance calculation**: Balance = sum(income transactions) - sum(expense transactions)
  version: 1.0.0
servers:
  - url: http://localhost:8080
    description: Local development server
paths:
  /auth/register:
    post:
      tags:
        - auth
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '200':
          description: Successful registration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Invalid request body
        '409':
          description: User with this email already exists
  /auth/login:
    post:
      tags:
        - auth
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials
  /api/me:
    get:
      tags:
        - users
      summary: Get current user information
      security:
        - BearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
  /api/assets:
    get:
      tags:
        - assets
      summary: Get user's assets
      security:
        - BearerAuth: []
      responses:
        '200':
          description: A list of assets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Asset'
        '401':
          description: Unauthorized
    post:
      tags:
        - assets
      summary: Create a new asset
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAssetRequest'
      responses:
        '200':
          description: Asset created successfully
        '400':
          description: Invalid request body
  /api/assets/{id}:
    patch:
      tags:
        - assets
      summary: Update an existing asset
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAssetRequest'
      responses:
        '200':
          description: Asset updated successfully
        '404':
          description: Asset not found
    delete:
      tags:
        - assets
      summary: Delete an asset
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Asset deleted successfully
        '404':
          description: Asset not found
  /api/assets/{id}/transactions:
    get:
      tags:
        - transactions
      summary: Get transactions for an asset
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the asset to retrieve transactions for
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: A list of transactions for the asset
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
        '401':
          description: Unauthorized
        '404':
          description: Asset not found
    post:
      tags:
        - transactions
      summary: Create a new transaction for an asset
      description: |
        Creates a new transaction for the specified asset. 
        
        **Important**: The asset's balance will be automatically updated:
        - For 'income' transactions: balance increases by the amount
        - For 'expense' transactions: balance decreases by the amount
        
        The operation is atomic - both the transaction creation and balance update happen in a single database transaction.
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the asset to create a transaction for
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTransactionRequest'
      responses:
        '200':
          description: Transaction created successfully and asset balance updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "transaction created successfully"
                  transaction_id:
                    type: string
                    format: uuid
        '400':
          description: Invalid request body or asset not found
        '401':
          description: Unauthorized
        '404':
          description: Asset not found
  /api/transactions/{id}:
    delete:
      tags:
        - transactions
      summary: Delete a transaction
      description: |
        Deletes a transaction and automatically reverses its effect on the asset's balance.
        
        **Important**: The asset's balance will be automatically updated:
        - If the deleted transaction was 'income': balance decreases by the transaction amount
        - If the deleted transaction was 'expense': balance increases by the transaction amount
        
        The operation is atomic - both the transaction deletion and balance update happen in a single database transaction.
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the transaction to delete
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Transaction deleted successfully and asset balance updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "transaction deleted successfully"
        '400':
          description: Transaction not found or doesn't belong to user
        '401':
          description: Unauthorized
        '404':
          description: Transaction not found
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        created_at:
          type: string
          format: date-time
    Asset:
      type: object
      properties:
        id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        name:
          type: string
        type:
          type: string
        balance:
          type: number
          format: decimal
          description: |
            Current balance of the asset. 
            This value is automatically calculated and updated based on all associated transactions.
            Balance = sum(income transactions) - sum(expense transactions)
        created_at:
          type: string
          format: date-time
        xirr:
          type: number
          format: float
          description: XIRR доходность актива (рассчитывается на лету, не хранится в базе)
        apy:
          type: number
          format: float
          description: APY доходность актива (рассчитывается на лету, не хранится в базе)
        apr:
          type: number
          format: float
          description: APR доходность актива (рассчитывается на лету, не хранится в базе)
        profit:
          type: number
          format: float
          description: |
            Чистая прибыль актива (рассчитывается на лету, не хранится в базе).
            Формула: Текущий баланс - Сумма вложений (deposits) + Сумма выводов (withdrawals) + Дивиденды (dividends)
    Transaction:
      type: object
      properties:
        id:
          type: string
          format: uuid
        asset_id:
          type: string
          format: uuid
        amount:
          type: number
          format: decimal
          description: The monetary amount of the transaction
        type:
          type: string
          enum: [deposit, withdrawal, buy, sell, revaluation, dividend]
          description: |
            Type of transaction:
            - 'deposit': Ввод средств (увеличивает денежный баланс)
            - 'withdrawal': Вывод средств (уменьшает денежный баланс)
            - 'buy': Покупка актива (уменьшает денежный баланс, увеличивает количество актива)
            - 'sell': Продажа актива (увеличивает денежный баланс, уменьшает количество актива)
            - 'revaluation': Изменение стоимости актива (обновляет цену, не меняет количество)
            - 'dividend': Дивиденды (увеличивает денежный баланс)
        description:
          type: string
          description: Human-readable description of the transaction
        timestamp:
          type: string
          format: date-time
          description: When the transaction was created
    RegisterRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 6
    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
        password:
          type: string
    LoginResponse:
      type: object
      properties:
        token:
          type: string
    CreateAssetRequest:
      type: object
      required: [name, type]
      properties:
        name:
          type: string
        type:
          type: string
    UpdateAssetRequest:
      type: object
      properties:
        name:
          type: string
        type:
          type: string
        balance:
          type: number
          format: decimal
    CreateTransactionRequest:
      type: object
      required: [amount, type, description]
      properties:
        amount:
          type: number
          format: decimal
          description: The monetary amount of the transaction
          example: 100.50
        type:
          type: string
          enum: [deposit, withdrawal, buy, sell, revaluation, dividend]
          description: |
            Type of transaction:
            - 'deposit': Ввод средств
            - 'withdrawal': Вывод средств
            - 'buy': Покупка актива
            - 'sell': Продажа актива
            - 'revaluation': Изменение стоимости
            - 'dividend': Дивиденды
          example: "deposit"
        description:
          type: string
          description: Human-readable description of the transaction
          example: "Salary payment"
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT 