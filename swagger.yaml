openapi: 3.0.0
info:
  title: Brok API
  description: |
    API для управления личными финансами и инвестициями.
    
    ## Основные возможности:
    - Управление активами (акции, облигации, депозиты и т.д.)
    - Отслеживание транзакций (покупки, продажи, дивиденды)
    - Расчет доходности (XIRR, APY, APR)
    - Мультивалютная поддержка
    - Курсы валют и конвертация
    
    ## Аутентификация:
    Все защищенные эндпоинты требуют JWT токен в заголовке `Authorization: Bearer <token>`
    
    ## Валюты:
    Поддерживаются основные валюты: USD, EUR, RUB, GBP, JPY, CNY, CHF, CAD, AUD, KRW
  version: 1.0.0

servers:
  - url: http://localhost:8080
    description: Development server
  - url: https://api.brok.com
    description: Production server

paths:
  /health:
    get:
      tags:
        - health
      summary: Health check
      description: Проверка работоспособности сервера
      responses:
        '200':
          description: Сервер работает
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ok"

  /auth/register:
    post:
      tags:
        - auth
      summary: Регистрация пользователя
      description: Создание нового аккаунта пользователя
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '200':
          description: Пользователь успешно зарегистрирован
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "user registered successfully"
                  user_id:
                    type: string
                    format: uuid
        '400':
          description: Неверные данные запроса
        '409':
          description: Пользователь с таким email уже существует

  /auth/login:
    post:
      tags:
        - auth
      summary: Вход в систему
      description: Аутентификация пользователя и получение JWT токена
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Успешная аутентификация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Неверные учетные данные

  /api/me:
    get:
      tags:
        - auth
      summary: Получить текущего пользователя
      description: Возвращает информацию о текущем аутентифицированном пользователе
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Информация о пользователе
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Неавторизованный доступ

  /api/assets:
    get:
      tags:
        - assets
      summary: Получить все активы пользователя
      description: |
        Возвращает список всех активов текущего пользователя с расчетом доходности.
        
        Для каждого актива рассчитываются:
        - XIRR (внутренняя норма доходности)
        - APY (эффективная годовая доходность)
        - APR (простая годовая ставка)
        - Прибыль (чистая прибыль)
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Список активов
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Asset'
        '401':
          description: Неавторизованный доступ

    post:
      tags:
        - assets
      summary: Создать новый актив
      description: Создает новый актив для текущего пользователя
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAssetRequest'
      responses:
        '200':
          description: Актив успешно создан
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "asset created successfully"
                  asset_id:
                    type: string
                    format: uuid
        '400':
          description: Неверные данные запроса
        '401':
          description: Неавторизованный доступ

  /api/assets/{id}:
    patch:
      tags:
        - assets
      summary: Обновить актив
      description: Обновляет существующий актив пользователя
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID актива для обновления
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAssetRequest'
      responses:
        '200':
          description: Актив успешно обновлен
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "asset updated successfully"
        '400':
          description: Неверные данные запроса
        '401':
          description: Неавторизованный доступ
        '404':
          description: Актив не найден

    delete:
      tags:
        - assets
      summary: Удалить актив
      description: |
        Удаляет актив и все связанные с ним транзакции.
        
        **Внимание**: Операция необратима!
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID актива для удаления
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Актив и транзакции успешно удалены
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "asset and related transactions deleted successfully"
        '401':
          description: Неавторизованный доступ
        '404':
          description: Актив не найден

  /api/assets/{id}/transactions:
    get:
      tags:
        - transactions
      summary: Получить транзакции актива
      description: Возвращает все транзакции для указанного актива
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID актива
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Список транзакций
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
        '401':
          description: Неавторизованный доступ
        '404':
          description: Актив не найден

    post:
      tags:
        - transactions
      summary: Создать транзакцию
      description: |
        Создает новую транзакцию для актива и автоматически обновляет его баланс.
        
        **Типы транзакций:**
        - `deposit` - ввод средств (увеличивает баланс)
        - `withdrawal` - вывод средств (уменьшает баланс)
        - `buy` - покупка актива (уменьшает баланс)
        - `sell` - продажа актива (увеличивает баланс)
        - `dividend` - дивиденды (увеличивает баланс)
        - `revaluation` - переоценка (может увеличить или уменьшить баланс)
        
        **Валюта:** Если валюта транзакции отличается от валюты актива, сумма будет автоматически конвертирована.
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID актива
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTransactionRequest'
      responses:
        '200':
          description: Транзакция успешно создана и баланс обновлен
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "transaction created successfully"
                  transaction_id:
                    type: string
                    format: uuid
        '400':
          description: Неверные данные запроса или актив не принадлежит пользователю
        '401':
          description: Неавторизованный доступ

  /api/transactions/{id}:
    delete:
      tags:
        - transactions
      summary: Удалить транзакцию
      description: |
        Удаляет транзакцию и автоматически отменяет её эффект на баланс актива.
        
        **Важно**: Баланс актива будет автоматически обновлен:
        - Если удаленная транзакция была 'доходом': баланс уменьшается на сумму транзакции
        - Если удаленная транзакция была 'расходом': баланс увеличивается на сумму транзакции
        
        Операция атомарная - удаление транзакции и обновление баланса происходят в одной транзакции БД.
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID транзакции для удаления
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Транзакция удалена успешно и баланс актива обновлен
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "transaction deleted successfully"
        '400':
          description: Транзакция не найдена или не принадлежит пользователю
        '401':
          description: Неавторизованный доступ
        '404':
          description: Транзакция не найдена

  /api/currencies:
    get:
      tags:
        - exchange-rates
      summary: Получить поддерживаемые валюты
      description: Возвращает список всех поддерживаемых валют с их символами
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Список поддерживаемых валют
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SupportedCurrency'
        '401':
          description: Неавторизованный доступ

  /api/exchange-rates:
    get:
      tags:
        - exchange-rates
      summary: Получить курс валют
      description: |
        Возвращает курс обмена между двумя валютами.
        
        Если дата не указана, возвращается последний доступный курс.
        Если указана дата, возвращается курс на эту дату (если доступен).
      security:
        - BearerAuth: []
      parameters:
        - name: from_currency
          in: query
          required: true
          description: Исходная валюта
          schema:
            type: string
            example: "USD"
        - name: to_currency
          in: query
          required: true
          description: Целевая валюта
          schema:
            type: string
            example: "EUR"
        - name: date
          in: query
          required: false
          description: Дата курса в формате YYYY-MM-DD
          schema:
            type: string
            format: date
            example: "2024-01-15"
      responses:
        '200':
          description: Курс валют
          content:
            application/json:
              schema:
                type: object
                properties:
                  from_currency:
                    type: string
                    example: "USD"
                  to_currency:
                    type: string
                    example: "EUR"
                  rate:
                    type: number
                    format: float
                    example: 0.85
                  date:
                    type: string
                    format: date
                    example: "2024-01-15"
        '400':
          description: Неверные данные запроса или неподдерживаемая валюта
        '401':
          description: Неавторизованный доступ
        '404':
          description: Курс не найден

  /api/exchange-rates/update:
    post:
      tags:
        - exchange-rates
      summary: Обновить курсы валют
      description: |
        Обновляет курсы валют из внешнего API.
        
        **Внимание**: Эта операция может занять некоторое время, так как запрашиваются курсы для всех поддерживаемых валют.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Курсы валют успешно обновлены
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "exchange rates updated successfully"
        '401':
          description: Неавторизованный доступ
        '500':
          description: Ошибка при обновлении курсов

  /api/convert:
    get:
      tags:
        - exchange-rates
      summary: Конвертировать сумму
      description: |
        Конвертирует сумму из одной валюты в другую.
        
        **Параметры:**
        - `from_currency` - исходная валюта (обязательно)
        - `to_currency` - целевая валюта (обязательно)
        - `amount` - сумма для конвертации (обязательно)
        - `date` - дата курса (опционально, если не указана - используется последний курс)
      security:
        - BearerAuth: []
      parameters:
        - name: from_currency
          in: query
          required: true
          description: Исходная валюта
          schema:
            type: string
            example: "USD"
        - name: to_currency
          in: query
          required: true
          description: Целевая валюта
          schema:
            type: string
            example: "EUR"
        - name: amount
          in: query
          required: true
          description: Сумма для конвертации
          schema:
            type: number
            format: float
            example: 100.50
        - name: date
          in: query
          required: false
          description: Дата курса в формате YYYY-MM-DD
          schema:
            type: string
            format: date
            example: "2024-01-15"
      responses:
        '200':
          description: Конвертированная сумма
          content:
            application/json:
              schema:
                type: object
                properties:
                  from_currency:
                    type: string
                    example: "USD"
                  to_currency:
                    type: string
                    example: "EUR"
                  original_amount:
                    type: number
                    format: float
                    example: 100.50
                  converted_amount:
                    type: number
                    format: float
                    example: 85.43
                  date:
                    type: string
                    format: date
                    example: "2024-01-15"
        '400':
          description: Неверные параметры запроса
        '401':
          description: Неавторизованный доступ
        '404':
          description: Курс не найден

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        base_currency:
          type: string
          description: Базовая валюта пользователя для отображения
          example: "USD"
        created_at:
          type: string
          format: date-time
    Asset:
      type: object
      properties:
        id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        name:
          type: string
        type:
          type: string
        balance:
          type: number
          format: decimal
          description: |
            Current balance of the asset. 
            This value is automatically calculated and updated based on all associated transactions.
            Balance = sum(income transactions) - sum(expense transactions)
        currency:
          type: string
          description: Валюта актива (ISO 4217 код)
          example: "USD"
        created_at:
          type: string
          format: date-time
        xirr:
          type: number
          format: float
          description: XIRR доходность актива (рассчитывается на лету, не хранится в базе)
        apy:
          type: number
          format: float
          description: APY доходность актива (рассчитывается на лету, не хранится в базе)
        apr:
          type: number
          format: float
          description: APR доходность актива (рассчитывается на лету, не хранится в базе)
        profit:
          type: number
          format: float
          description: |
            Чистая прибыль актива (рассчитывается на лету, не хранится в базе).
            Формула: Текущий баланс - Сумма вложений (deposits) + Сумма выводов (withdrawals) + Дивиденды (dividends)
    Transaction:
      type: object
      properties:
        id:
          type: string
          format: uuid
        asset_id:
          type: string
          format: uuid
        amount:
          type: number
          format: decimal
          description: The monetary amount of the transaction
        currency:
          type: string
          description: Валюта транзакции (ISO 4217 код)
          example: "USD"
        type:
          type: string
          enum: [deposit, withdrawal, buy, sell, revaluation, dividend]
          description: |
            Type of transaction:
            - 'deposit': Ввод средств (увеличивает денежный баланс)
            - 'withdrawal': Вывод средств (уменьшает денежный баланс)
            - 'buy': Покупка актива (уменьшает денежный баланс, увеличивает количество актива)
            - 'sell': Продажа актива (увеличивает денежный баланс, уменьшает количество актива)
            - 'revaluation': Изменение стоимости актива (обновляет цену, не меняет количество)
            - 'dividend': Дивиденды (увеличивает денежный баланс)
        description:
          type: string
          description: Human-readable description of the transaction
        timestamp:
          type: string
          format: date-time
          description: When the transaction was created
    SupportedCurrency:
      type: object
      properties:
        code:
          type: string
          description: Код валюты (ISO 4217)
          example: "USD"
        name:
          type: string
          description: Название валюты
          example: "US Dollar"
        symbol:
          type: string
          description: Символ валюты
          example: "$"
        is_supported:
          type: boolean
          description: Поддерживается ли валюта
          example: true
    ExchangeRateRequest:
      type: object
      required: [from_currency, to_currency]
      properties:
        from_currency:
          type: string
          description: Исходная валюта
          example: "USD"
        to_currency:
          type: string
          description: Целевая валюта
          example: "EUR"
        date:
          type: string
          format: date
          description: Дата курса (опционально)
          example: "2024-01-15"
    RegisterRequest:
      type: object
      required: [email, password, base_currency]
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 6
        base_currency:
          type: string
          description: Базовая валюта пользователя
          example: "USD"
    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
        password:
          type: string
    LoginResponse:
      type: object
      properties:
        token:
          type: string
    CreateAssetRequest:
      type: object
      required: [name, type, currency]
      properties:
        name:
          type: string
        type:
          type: string
        currency:
          type: string
          description: Валюта актива
          example: "USD"
    UpdateAssetRequest:
      type: object
      properties:
        name:
          type: string
        type:
          type: string
        balance:
          type: number
          format: decimal
        currency:
          type: string
          description: Валюта актива
          example: "USD"
    CreateTransactionRequest:
      type: object
      required: [amount, currency, type, description]
      properties:
        amount:
          type: number
          format: decimal
          description: The monetary amount of the transaction
          example: 100.50
        currency:
          type: string
          description: Валюта транзакции
          example: "USD"
        type:
          type: string
          enum: [deposit, withdrawal, buy, sell, revaluation, dividend]
          description: |
            Type of transaction:
            - 'deposit': Ввод средств
            - 'withdrawal': Вывод средств
            - 'buy': Покупка актива
            - 'sell': Продажа актива
            - 'revaluation': Изменение стоимости
            - 'dividend': Дивиденды
          example: "deposit"
        description:
          type: string
          description: Human-readable description of the transaction
          example: "Salary payment"
        timestamp:
          type: string
          format: date-time
          description: |
            Optional timestamp for the transaction. 
            If not provided, current time will be used.
            Useful for historical data or corrections.
          example: "2024-01-15T10:30:00Z"
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT 