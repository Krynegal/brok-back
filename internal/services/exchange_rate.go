package services

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"math"
	"net/http"
	"time"

	"brok/internal/models"
	"brok/internal/storage"
)

// ExchangeRateService —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—É—Ä—Å–∞–º–∏ –≤–∞–ª—é—Ç
type ExchangeRateService struct {
	storage storage.Storage
	apiKey  string
	apiURL  string
}

// NewExchangeRateService —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
func NewExchangeRateService(storage storage.Storage) *ExchangeRateService {
	return &ExchangeRateService{
		storage: storage,
		apiKey:  "demo", // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π API –¥–ª—è –¥–µ–º–æ
		apiURL:  "https://api.exchangerate-api.com/v4/latest/",
	}
}

// ExchangeRateAPIResponse –æ—Ç–≤–µ—Ç –æ—Ç API –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
type ExchangeRateAPIResponse struct {
	Base  string             `json:"base"`
	Date  string             `json:"date"`
	Rates map[string]float64 `json:"rates"`
}

// ShouldUpdateRates –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç
func (s *ExchangeRateService) ShouldUpdateRates(ctx context.Context, updateInterval time.Duration) (bool, error) {
	lastUpdate, err := s.storage.GetLastExchangeRateUpdate(ctx)
	if err != nil {
		return false, fmt.Errorf("failed to get last update time: %w", err)
	}

	// –ï—Å–ª–∏ –∫—É—Ä—Å–æ–≤ –µ—â–µ –Ω–µ—Ç, –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å
	if lastUpdate == nil {
		return true, nil
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
	timeSinceLastUpdate := time.Since(*lastUpdate)
	return timeSinceLastUpdate >= updateInterval, nil
}

// UpdateExchangeRatesIfNeeded –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏
func (s *ExchangeRateService) UpdateExchangeRatesIfNeeded(ctx context.Context, updateInterval time.Duration) error {
	shouldUpdate, err := s.ShouldUpdateRates(ctx, updateInterval)
	if err != nil {
		return fmt.Errorf("failed to check if update is needed: %w", err)
	}

	if !shouldUpdate {
		lastUpdate, _ := s.storage.GetLastExchangeRateUpdate(ctx)
		if lastUpdate != nil {
			log.Printf("‚è∞ –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã %v –Ω–∞–∑–∞–¥, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", time.Since(*lastUpdate).Round(time.Minute))
		}
		return nil
	}

	log.Printf("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç (–ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±—ã–ª–æ –±–æ–ª–µ–µ %v –Ω–∞–∑–∞–¥)", updateInterval)
	return s.UpdateExchangeRates(ctx)
}

// UpdateExchangeRates –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –∏–∑ API
func (s *ExchangeRateService) UpdateExchangeRates(ctx context.Context) error {
	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –≤–∞–ª—é—Ç
	currencies := models.GetSupportedCurrencies()

	for _, currency := range currencies {
		if !currency.IsSupported {
			continue
		}

		// –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–π –≤–∞–ª—é—Ç—ã
		if err := s.updateRatesForCurrency(ctx, currency.Code); err != nil {
			log.Printf("Error updating rates for %s: %v", currency.Code, err)
			continue
		}
	}

	return nil
}

// updateRatesForCurrency –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫—É—Ä—Å—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–∞–ª—é—Ç—ã
func (s *ExchangeRateService) updateRatesForCurrency(ctx context.Context, baseCurrency string) error {
	url := s.apiURL + baseCurrency

	resp, err := http.Get(url)
	if err != nil {
		return fmt.Errorf("failed to fetch rates: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return fmt.Errorf("API returned status: %d", resp.StatusCode)
	}

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("failed to read response: %w", err)
	}

	var apiResp ExchangeRateAPIResponse
	if err := json.Unmarshal(body, &apiResp); err != nil {
		return fmt.Errorf("failed to parse response: %w", err)
	}

	// –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
	date, err := time.Parse("2006-01-02", apiResp.Date)
	if err != nil {
		return fmt.Errorf("failed to parse date: %w", err)
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—É—Ä—Å—ã –≤ –±–∞–∑—É
	for targetCurrency, rate := range apiResp.Rates {
		// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã
		if !models.IsCurrencySupported(targetCurrency) {
			continue
		}

		// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫—É—Ä—Å –∫ —Å–∞–º–æ–º—É —Å–µ–±–µ
		if baseCurrency == targetCurrency {
			continue
		}

		exchangeRate := models.ExchangeRate{
			FromCurrency: baseCurrency,
			ToCurrency:   targetCurrency,
			Rate:         rate,
			Timestamp:    date,
		}

		if err := s.storage.SaveExchangeRate(ctx, exchangeRate); err != nil {
			log.Printf("Error saving rate %s->%s: %v", baseCurrency, targetCurrency, err)
		}
	}

	return nil
}

// GetExchangeRate –ø–æ–ª—É—á–∞–µ—Ç –∫—É—Ä—Å –≤–∞–ª—é—Ç
func (s *ExchangeRateService) GetExchangeRate(ctx context.Context, fromCurrency, toCurrency string, date time.Time) (float64, error) {
	// –ï—Å–ª–∏ –≤–∞–ª—é—Ç—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 1
	if fromCurrency == toCurrency {
		return 1.0, nil
	}

	// –ò—â–µ–º –∫—É—Ä—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	rate, err := s.storage.GetExchangeRate(ctx, fromCurrency, toCurrency, date)
	if err == nil {
		return rate, nil
	}

	// –ï—Å–ª–∏ –∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –æ–±—Ä–∞—Ç–Ω—ã–π –∫—É—Ä—Å
	reverseRate, err := s.storage.GetExchangeRate(ctx, toCurrency, fromCurrency, date)
	if err == nil {
		return 1.0 / reverseRate, nil
	}

	// –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
	return 0, fmt.Errorf("exchange rate not found for %s->%s on %s", fromCurrency, toCurrency, date.Format("2006-01-02"))
}

// ConvertAmount –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å—É–º–º—É –∏–∑ –æ–¥–Ω–æ–π –≤–∞–ª—é—Ç—ã –≤ –¥—Ä—É–≥—É—é
func (s *ExchangeRateService) ConvertAmount(ctx context.Context, amount float64, fromCurrency, toCurrency string, date time.Time) (float64, error) {
	rate, err := s.GetExchangeRate(ctx, fromCurrency, toCurrency, date)
	if err != nil {
		return 0, err
	}

	return amount * rate, nil
}

// GetLatestExchangeRate –ø–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –∫—É—Ä—Å –≤–∞–ª—é—Ç
func (s *ExchangeRateService) GetLatestExchangeRate(ctx context.Context, fromCurrency, toCurrency string) (float64, error) {
	// –ï—Å–ª–∏ –≤–∞–ª—é—Ç—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 1
	if fromCurrency == toCurrency {
		return 1.0, nil
	}

	// –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫—É—Ä—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	rate, err := s.storage.GetLatestExchangeRate(ctx, fromCurrency, toCurrency)
	if err == nil {
		return rate, nil
	}

	// –ï—Å–ª–∏ –∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –æ–±—Ä–∞—Ç–Ω—ã–π –∫—É—Ä—Å
	reverseRate, err := s.storage.GetLatestExchangeRate(ctx, toCurrency, fromCurrency)
	if err == nil {
		return 1.0 / reverseRate, nil
	}

	// –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
	return 0, fmt.Errorf("exchange rate not found for %s->%s", fromCurrency, toCurrency)
}

// ConvertAmountLatest –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å—É–º–º—É –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –∫—É—Ä—Å—É
func (s *ExchangeRateService) ConvertAmountLatest(ctx context.Context, amount float64, fromCurrency, toCurrency string) (float64, error) {
	rate, err := s.GetLatestExchangeRate(ctx, fromCurrency, toCurrency)
	if err != nil {
		return 0, err
	}

	return amount * rate, nil
}

// RoundAmount –æ–∫—Ä—É–≥–ª—è–µ—Ç —Å—É–º–º—É –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
func (s *ExchangeRateService) RoundAmount(amount float64) float64 {
	return math.Round(amount*100) / 100
}

// GetLastUpdateTime –ø–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
func (s *ExchangeRateService) GetLastUpdateTime(ctx context.Context) (*time.Time, error) {
	return s.storage.GetLastExchangeRateUpdate(ctx)
}
